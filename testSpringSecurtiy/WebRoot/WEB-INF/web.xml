<?xml version="1.0" encoding="UTF-8"?>

<web-app version="2.5" xmlns="http://java.sun.com/xml/ns/javaee"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee 
		http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd">


	<!-- 设置log4j存放Log文件位置（通过spring统一进行管理） -->
	<context-param>
		<param-name>webAppRootKey</param-name>
		<param-value>log.root</param-value>
	</context-param>

	<!-- 加载log4j的配置文件 -->
	<context-param>
		<param-name>log4jConfigLocation</param-name>
		<param-value>classpath:/log4j.properties</param-value>
	</context-param>

	<!--Spring默认刷新Log4j配置文件的间隔,单位为millisecond-->
	<context-param>
		<param-name>log4jRefreshInterval</param-name>
		<param-value>60000</param-value>
	</context-param>

	<!--Spring用于log4j初始化的监听器-->
	<listener>
		<listener-class>org.springframework.web.util.Log4jConfigListener</listener-class>
	</listener>

	<!--
		加载Spring XML配置文件，Spring安全配置及各类资源文件，暂不加
		/WEB-INF/applicationContext-security.xml,
	-->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>
           /WEB-INF/applicationContext*.xml,
           classpath*:applicationContext.xml
        </param-value>
	</context-param>
	


	<!--spring监听器的配置，用于在启动Web容器时，自动装配ApplicationContext的配置信息-->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>

	<!--
		使用Spring中的过滤器解决在请求和应答中的中文乱码问题(不是为了初始化每个jsp页面) (sparta 100425 待试验)
	-->
	<filter>
		<filter-name>characterEncodingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>gbk</param-value>
		</init-param>
		<init-param>
			<!--强制转换编码(request和response均适用) -->
			<param-name>ForceEncoding</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>

	<filter-mapping>
		<filter-name>characterEncodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

 
	<!-- Spring Secutiry3.0 10/6/8 15:05 -->
	<filter>
		<filter-name>springSecurityFilterChain</filter-name>
		<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
	</filter>

	<filter-mapping>
		<filter-name>springSecurityFilterChain</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>


	<!-- 配置Struts2的FilterDispathcer的Filter -->
    <filter>
        <filter-name>struts2</filter-name>
        
        <!-- 下面是Struts2.1.6及以后要使用的Action转发过滤器新版本--> 
        <filter-class>
        	org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter
        </filter-class>        
    </filter>

	<!-- struts2用以处理用户Web请求的路径模式-->
    <filter-mapping>
        <filter-name>struts2</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>
    


    <!-- 解决Hibernate的延迟加载造成的Session提前关闭问题，设置该项使Session保持Request请求
                 完成才关闭Session。      -->
 	<filter>
        <filter-name>opensession</filter-name>
        <filter-class>org.springframework.orm.hibernate3.support.OpenSessionInViewFilter</filter-class>
        <init-param>
            <param-name>singleSession</param-name>
            <param-value>true</param-value>
        </init-param>
    </filter>  

	<filter-mapping>
        <filter-name>opensession</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>
   
   
	
	<!-- 避免乱码问题 -->
	<filter>
        <filter-name>struts-cleanup</filter-name>
        <filter-class>
            org.apache.struts2.dispatcher.ActionContextCleanUp
        </filter-class>
    </filter>
    
    <filter-mapping>
        <filter-name>struts-cleanup</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>
    
    <!-- Spring刷新Interceptor防止内存泄漏 11/3/22 22:04 -->
    <listener>
    	<listener-class>
    	org.springframework.web.util.IntrospectorCleanupListener
    	</listener-class>
    </listener>
	


	<!--
		设置session 超时:
		session-config元素为Web应用中的javax.servlet.http.HttpSession对象定义参数。
		session-timeout元素用来指定默认的会话超时时间间隔，以分钟为单位。该元素值必须为整数。
		如果session-timeout元素的值为零或负数，则表示会话将永远不会超时。
		下面是一个部署描述符，在用户最近访问HttpSession对象20分钟后，HttpSession对象默认为无效。
	-->
	<session-config>
		<session-timeout>20</session-timeout>
	</session-config>


	<!--系统欢迎页面-->
	<welcome-file-list>
		<welcome-file>login.jsp</welcome-file>
	</welcome-file-list>



</web-app>
